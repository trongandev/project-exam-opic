import AvatarCircle from '@/components/etc/AvatarCircle'
import feedbackService from '@/services/feedbackService'
import type { FeedbackResponse } from '@/types/etc'
import { formatDistance } from 'date-fns'
import { vi } from 'date-fns/locale/vi'
import { MessageCircleMore, Star } from 'lucide-react'
import { useEffect, useState } from 'react'
import { Link } from 'react-router-dom'
import { toast } from 'sonner'
import RatingComponent from '../components/RatingComponent'
import LoadingGrid from '@/components/etc/LoadingGrid'
import { useAuth } from '@/contexts/AuthContext'

export default function FeedbackPage() {
    const [rating, setRating] = useState(5)
    const [isSubmittingReview, setIsSubmittingReview] = useState(false)
    const [feedback, setFeedback] = useState<FeedbackResponse[]>([])
    const [loading, setLoading] = useState(false)
    const [comment, setComment] = useState('')
    const { user } = useAuth()
    useEffect(() => {
        const fetchFeedback = async () => {
            setLoading(true)
            const res = await feedbackService.getAllFeedbacks(1, 20)
            console.log(res)
            setFeedback(res)
            setLoading(false)
        }
        fetchFeedback()
    }, [])
    const handleSubmitReview = async () => {
        if (rating === 0) {
            toast.error('Vui l√≤ng ch·ªçn s·ªë sao ƒë√°nh gi√°!')
            return
        }
        if (!comment) {
            toast.error('Vui l√≤ng nh·∫≠p nh·∫≠n x√©t!')
            return
        }

        setIsSubmittingReview(true)
        try {
            const res = await feedbackService.createFeedback({ rating, comment })
            console.log('ƒê√°nh gi√° g·ª≠i th√†nh c√¥ng:', res.data)

            setRating(0)
            setComment('')
            toast.success('C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!')
            const newRating: FeedbackResponse = {
                _id: Date.now().toString(),
                userId: user!,
                rating,
                comment,
                helpfulCount: 0,
                createdAt: Date.now().toString(),
                updatedAt: Date.now().toString(),
            }
            setFeedback((prev) => {
                if (!prev) return prev
                return [newRating, ...prev]
            })
        } catch (error: any) {
            toast.error(error)
        } finally {
            setIsSubmittingReview(false)
        }
    }
    return (
        <div className="px-4 xl:px-0 max-w-7xl mx-auto my-20  min-h-screen">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold text-gray-900 mb-2">G√≥p √Ω & ph·∫£n h·ªìi</h1>
                <p className="text-gray-600 mx-auto max-w-3xl">
                    B·∫°n h√£y ƒë·ªÉ l·∫°i 1 g√≥p √Ω cho s·∫£n ph·∫©m, c≈©ng nh∆∞ ph·∫£n h·ªìi v·ªÅ tr·∫£i nghi·ªám c·ªßa b·∫°n, ho·∫∑c b·∫°n c√≥ th·ªÉ y√™u c·∫ßu m·ªôt t√≠nh nƒÉng m·ªõi. M√¨nh s·∫Ω c·ªë g·∫Øng c·∫≠p nh·∫≠t t√≠nh nƒÉng ƒë√≥ nh√© üòò
                </p>
            </div>
            <RatingComponent
                title="ƒê√°nh gi√° s·∫£n ph·∫©m"
                score={rating}
                setScore={setRating}
                comment={comment}
                setComment={setComment}
                isSubmittingReview={isSubmittingReview}
                handleSubmitReview={handleSubmitReview}
            />

            <div className="mt-8 bg-white border border-gray-200 rounded-lg p-6 shadow-sm">
                <h3 className="text-lg font-semibold mb-4 flex gap-2 items-center">
                    <MessageCircleMore size={18} className="text-primary" /> B√¨nh lu·∫≠n v√† ƒë√°nh gi√° c·ªßa nh·ªØng ng∆∞·ªùi kh√°c
                </h3>
                {feedback.length === 0 && <p className="text-gray-500">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o</p>}
                <div className="space-y-5">
                    {!loading &&
                        feedback &&
                        feedback.map((item) => (
                            <div key={item._id} className="flex gap-4 border border-gray-200 rounded-lg p-4">
                                <Link to={`/profile/${item.userId._id}`}>
                                    <AvatarCircle user={item.userId} className="h-14 w-14" />
                                </Link>
                                <div className="flex-1">
                                    <div className="flex items-center justify-between">
                                        <div className="flex items-center gap-3">
                                            <h4 className="font-medium">{item.userId.displayName}</h4>
                                            <p className="ml-2 text-sm text-gray-600 flex gap-1 items-center">
                                                ({item.rating}/5 <Star size={14} className="fill-yellow-500 stroke-yellow-500" />)
                                            </p>
                                        </div>
                                        <div className="text-xs text-gray-500">{formatDistance(new Date(item.createdAt), new Date(), { addSuffix: true, locale: vi })}</div>
                                    </div>
                                    <p className="mt-1 text-gray-700">{item.comment}</p>
                                </div>
                            </div>
                        ))}
                    {loading && <LoadingGrid />}
                </div>
            </div>
            <div className="mt-20 text-gray-600">
                <p>
                    B·∫°n c√≥ th·ªÉ{' '}
                    <a className="underline text-blue-500" href="mailto:trongandev@gmail.com">
                        nh·∫•n v√†o ƒë√¢y
                    </a>{' '}
                    ƒë·ªÉ y√™u c·∫ßu t√≠nh nƒÉng m·ªõi nh√©
                </p>
            </div>
        </div>
    )
}
